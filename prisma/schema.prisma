// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User profile information
  companyName   String?
  phoneNumber   String?
  address       String?
  city          String?
  country       String?
  language      String    @default("en")
  timezone      String    @default("UTC")
  
  // Subscription and billing
  subscriptionStatus String @default("trial")
  subscriptionPlan   String @default("free")
  trialEndsAt        DateTime?
  subscriptionEndsAt DateTime?
  
  // Relations
  accounts     Account[]
  sessions     Session[]
  cards        Card[]
  machines     Machine[]
  orders       Order[]
  payments     Payment[]
}

model Card {
  id            String   @id @default(cuid())
  userId        String
  cardNumber    String   // Encrypted
  cardHolder    String
  expiryMonth   Int
  expiryYear    Int
  cvv           String   // Encrypted
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Machine {
  id          String   @id @default(cuid())
  userId      String
  name        String
  location    String
  machineId   String   @unique
  status      String   @default("active") // active, inactive, maintenance
  lastSeen    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  machineId   String?
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  status      String   @default("pending") // pending, completed, failed, refunded
  items       Json?    // Store order items as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  orderId       String
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("USD")
  status        String   @default("pending") // pending, succeeded, failed, refunded
  stripePaymentId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
